version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
      - "50051:50051"
      - "9090:9090"
      - "3000:3000"
    environment:
      - SERVER_HOST=0.0.0.0
      - DATABASE_HOST=postgres
      - CACHE_ADDRESS=redis:6379
      - KAFKA_BROKERS=kafka:9092
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
      - MONGODB_URI=mongodb://mongodb:27017/myapp_db
      - KUBERNETES_SERVICE_HOST=kubernetes-dashboard
      - KUBERNETES_SERVICE_PORT=8443
    depends_on:
      - postgres
      - redis
      - kafka
      - jaeger
      - elasticsearch
      - kibana
      - mongodb
      - kubernetes-dashboard
    volumes:
      - ./k8s:/app/k8s  # Монтируем директорию с конфигурациями Kubernetes

  postgres:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: myapp_db
      POSTGRES_USER: myapp_user
      POSTGRES_PASSWORD: myapp_password
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"

  kafka:
    image: confluentinc/cp-kafka:latest-ubi8
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  zookeeper:
    image: confluentinc/cp-zookeeper:latest-ubi8
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "6831:6831/udp"

  elasticsearch:
    image: elasticsearch:7.14.0
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"

  kibana:
    image: kibana:7.14.0
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      MONGO_INITDB_DATABASE: myapp_db

  kubernetes-dashboard:
    image: kubernetesui/dashboard:v2.5.0
    ports:
      - "8443:8443"
    volumes:
      - ./k8s:/config  # Монтируем конфигурации Kubernetes
    command:
      - /dashboard
      - --insecure-bind-address=0.0.0.0
      - --enable-insecure-login
      - --enable-skip-login
      - --disable-settings-authorizer

volumes:
  postgres_data:
  mongodb_data:
  k8s_config:
    driver: local
    driver_opts:
      type: none
      device: $PWD/k8s
      o: bind
